<?php
/**
 * Provides email_validator_check($mail).
 *
 * Authors: Artful Robot <forums@artfulrobot.com>,
 * 	        Daniel Bonniot <bonniot@users.sourceforge.net>
 * License:   GNU GPL v2 or later
 *
 * We should return:
 * - OK.
 * - Message + confidence
 *
 * Confidence is a scale:
 * - Good: configured checks were OK.
 * - Medium: unsure, probably best to check.
 * - Low: some error.
 *
 * Confidence EMAIL_VALIDATOR_UNDELIVERABLE
 * - 2: No DNS. Email will definitely be undeliverable.
 * - 4: SMTP. rejected. Likely undeliverable.
 *
 * Confidence EMAIL_VALIDATOR_UNSURE
 * - 3: SMTP failed to connect to any MX. Unlikely we can send email, possibly
 *   could work later.
 * - 5: SMTP We could not definitely say it would work because we did not
 *   receive 250 code from SMTP chat. However a persistent MTA might succeed.
 * - 6: SMTP. 4xx errors mean we can't fully check, inc. geylisting.
 *
 * Confidence EMAIL_VALIDATOR_OK
 */

define('EMAIL_VALIDATOR_MINIMAL', 0);
define('EMAIL_VALIDATOR_DNS', 1);
define('EMAIL_VALIDATOR_FULL', 2);
define('EMAIL_VALIDATOR_UNDELIVERABLE', 0);
define('EMAIL_VALIDATOR_UNSURE', 1);
define('EMAIL_VALIDATOR_OK', 2);

class EmailValidator {
  public static $runtime_forms=[];

  public static function setFormRequiresConfirm($form, $element, $message) {
    // Store on runtime cache available to the #pre_render.
    static::$runtime_forms[$form['#form_id']] = [
      'confirmed' => FALSE,
      ];
    form_error($element, t($message));
  }
  public static function previouslyConfirmed($form, $element) {
    // Store on runtime cache available to the #pre_render.
    static::$runtime_forms[$form['#form_id']] = [
      'confirmed' => $element['#value'],
      ];
  }
  public static function preRender($element) {
    if (empty($element['#form_id']) || empty(static::$runtime_forms[$element['#form_id']])) {
      // Either something's not configured right (no form_id)
      // or we don't need to act on this element.
      return $element;
    }

    // Need to add elements to the form.
    $conf = static::$runtime_forms[$element['#form_id']];

    // Prevent infinite loop.
    unset($element['#pre_render']);

    if ($conf['confirmed']) {
      // Create a hidden field with the confirmed email.
      return [$element,
        'email_validator_confirmed' => [
          '#tree' => FALSE,
          '#type' => 'hidden',
          '#name' => 'email_validator_confirmed',
          '#value' => $element['#value'],
        ]];
    }
    else {
      // Create a field for the user to provide a confirmation.
      return [$element,
        'email_validator_confirm' => [
          '#tree' => FALSE,
          '#type' => 'textfield',
          '#title' => t('Please re-enter email to confirm'),
          '#id' => 'email-validator-confirm',
          '#name' => 'email_validator_confirm',
          '#weight' => isset($element['#weight']) ? $element['#weight'] + 0.0001 : 0,
        ]];
    }
  }

}

// Drupal hooks

/**
 * Implements hook_menu
 *
 */
function email_validator_menu()
{
  $items['admin/config/email-validator'] = array(
    'title' => 'Configure Email Validator',
    'page callback' => 'drupal_get_form',
    'page arguments'  => array('email_validator_admin_form'),
    'access arguments'  => array('administer email_validator'),
  );
  $items['admin/reports/email-validator/demo'] = array(
    'title' => 'Email Validator Demo',
    'page callback' => 'drupal_get_form',
    'page arguments'  => array('email_validator_demo_form'),
    'access arguments'  => array('administer email_validator'),
  );
  $items['admin/reports/email-validator'] = array(
    'title' => 'Email Validator',
    'page callback' => 'drupal_get_form',
    'page arguments'  => array('email_validator_debug_form'),
    'access arguments'  => array('administer email_validator'),
  );
  return $items;
}
function email_validator_permission()
{
	return array(
			'administer email_validator' => array(
				'title' => t('Administer Email Validator'),
				'description' => t('Set return path for SMTP conversations'),
				),
			);
}

/**
 * Implements hook_schema
 */
function email_validator_schema()
{
    $schema = array();
    $schema['email_validator_cache'] = array(
        'description' => 'Holds recent SMTP lookup results',
        'fields' => array(
            'id' => array(
                'description' => 'primary key',
                'type' => 'serial',
                'unsigned' => true,
                'not null' => true,
                ),
            'ip' => array(
                'description' => 'Client IP address',
                'type' => 'varchar',
                'length' => 15, // nnn.nnn.nnn.nnn
                'not null' => true,
                'default' => '',
                ),
            'email' => array(
                'description' => 'The email address looked up',
                'type' => 'varchar',
                'length' => 200,
                'not null' => true,
                'default' => '',
                ),
            'when' => array(
                'description' => 'Unix time of lookup',
                'type' => 'int',
                'unsigned' => true,
                'not null' => true,
                'default' => 0,
                ),
            'result' => array(
                'description' => 'Successful SMTP?',
                'type' => 'int',
                'size' => 'tiny',
                'not null' => true,
                'unsigned' => true,
                'default' => 0,
                ),
            ),
        'primary key' => array( 'id' ),
        'indexes' => array(
            'i_when' => array('when'),
            'i_email' => array('email'),
            'i_ip' => array('ip'),
            ),
    );

    return $schema;
}

// Forms

/**
 * Admin form
 */
function email_validator_admin_form()
{
    drupal_set_title("Configure Email Validator API");
    $form = array(
        'email_validator_returnpath' => array(
            '#type' => 'textfield',
            '#title' => t('Email address to use for return path in checks. Should be valid.'),
            '#default_value' => variable_get('email_validator_returnpath',
                variable_get('site_mail', ini_get('sendmail_from'))),
            ),
        'email_validator_flood_today' => [
          '#type' => 'textfield',
          '#title' => t('How many failed attempts in one day before we ban the IP address? Suggestion: 3'),
          '#default_value' => variable_get('email_validator_flood_today',3),
        ],
        'email_validator_flood_this_month' => [
          '#type' => 'textfield',
          '#title' => t('How many failed attempts in one month before we ban the IP address? Suggestion: 10'),
          '#default_value' => variable_get('email_validator_flood_month',10),
        ],
        'email_validator_enable' => [
          '#type' => 'select',
          '#title' => t('Validation level'),
          '#description' => t('Choose the level of validation'),
          '#options' => [
            EMAIL_VALIDATOR_MINIMAL => 'Minimal: just check syntax',
            EMAIL_VALIDATOR_DNS => 'Check DNS has MX record',
            EMAIL_VALIDATOR_FULL => 'Check SMTP will accept mail',
            ],
          '#default_value' => variable_get('email_validator_enable', EMAIL_VALIDATOR_MINIMAL),
        ],
        'email_validator_smtp_skip' => [
          '#type' => 'textarea',
          '#title' => t('Skip SMTP for these domains'),
          '#description' => t('Never do SMTP checks for these domains. This can be useful for domains that consider SMTP checks suspicious.'),
          '#default_value' => variable_get('email_validator_smtp_skip',
            "hotmail.*\noutlook.com\nlive.com\n"),
        ],
    );
    return system_settings_form($form);
}


/**
 * This function a modified version of the email_validator module's:
 * 	Verifies thoroughly that email addresses are correctly entered.
 *
 * There are these levels of check:
 *
 * 1. Drupal's valid_email_address()
 * 2. Check for domain and MX record.
 * 3. Try SMTP.
 *
 * 	Copyright:
 * 	- Rich Lott <forums@artfulrobot.uk>
 * 	- Daniel Bonniot <bonniot@users.sourceforge.net>,
 * 	           
 * 	License:   GNU GPL v2 or later
 *
 * @return error string, or null (no error)
 */
function email_validator_check($mail, &$debug_log=null, $use_cache=TRUE) {
  $result = email_validator_run_check($mail, $use_cache);
  $debug_log = $result['log'];
  return $result['message'];
}

/**
 * This function a modified version of the email_validator module's:
 * 	Verifies thoroughly that email addresses are correctly entered.
 *
 * There are these levels of check:
 *
 * 1. Drupal's valid_email_address()
 * 2. Check for domain and MX record.
 * 3. Try SMTP.
 *
 * 	Copyright:
 * 	- Rich Lott <forums@artfulrobot.uk>
 * 	- Daniel Bonniot <bonniot@users.sourceforge.net>,
 * 	           
 * 	License:   GNU GPL v2 or later
 *
 * @param string $mail the email to check.
 * @param bool $use_cache
 * @param mixed $level Supply if you don't want the globally configured value.
 * @param mixed $skip_patterns Supply an array if you don't want config value.
 *
 * @return array:
 * - confidence: one of:
 *   - EMAIL_VALIDATOR_UNDELIVERABLE
 *   - EMAIL_VALIDATOR_UNSURE
 *   - EMAIL_VALIDATOR_OK
 * - message: string
 * - log: array of messages.
 */
function email_validator_run_check($mail, $use_cache=TRUE, $level=NULL, $skip_patterns=NULL) {
  if ($level === NULL) {
    // Use configured enable level.
    $level = variable_get('email_validator_enable', EMAIL_VALIDATOR_MINIMAL);
  }
  elseif (!is_int($level) || $level < EMAIL_VALIDATOR_MINIMAL || $level > EMAIL_VALIDATOR_FULL) {
    throw new InvalidArgumentException('email_validator_run_check: Invalid $level parameter. Expected one of EMAIL_VALIDATOR_MINIMAL, EMAIL_VALIDATOR_DNS, EMAIL_VALIDATOR_FULL');
  }
  if ($skip_patterns === NULL) {
    // Use configured skip patterns.
    $skip_patterns = explode("\n", variable_get('email_validator_smtp_skip', ''));
  }
  elseif (!is_array($skip_patterns)) {
    throw new InvalidArgumentException('email_validator_run_check: If provided, $skip_patterns must be an array.');
  }
  $return = [
    'confidence' => EMAIL_VALIDATOR_OK,
    'message' => '',
    'log' => [],
    ];
  $confidence_map = [
    0 => EMAIL_VALIDATOR_OK,
    1 => EMAIL_VALIDATOR_OK,
    2 => EMAIL_VALIDATOR_UNDELIVERABLE,
    3 => EMAIL_VALIDATOR_UNSURE,
    4 => EMAIL_VALIDATOR_UNDELIVERABLE,
    5 => EMAIL_VALIDATOR_UNSURE,
    6 => EMAIL_VALIDATOR_UNSURE,
    ];
  $debug_log = &$return['log'];

  if (!valid_email_address($mail)) {
    // The address is syntactically incorrect.
    $debug_log[] = check_plain("$mail failed valid_email_address test");
    $debug_log[] = $return['message'] = t('Email address %mail is invalid', array('%mail'=>check_plain($mail)));
    $return['confidence'] = EMAIL_VALIDATOR_UNDELIVERABLE;
    return $return;
  }

  if ($level == EMAIL_VALIDATOR_MINIMAL) {
    // Further functionality disabled.
    $return['confidence'] = EMAIL_VALIDATOR_OK;
    return $return;
  }

  // For testing purposes we use three example.com emails.
  if ($mail == 'ok@example.com') {
    $debug_log[] = "Allowing test address $mail";
    return $return;
  }
  elseif ($mail == 'unsure@example.com') {
    $debug_log[] = "Warning test address $mail";
    $return['confidence'] = EMAIL_VALIDATOR_UNSURE;
    $debug_log[] = "Warning about test address $mail";
    $return['message'] = t('There is a problem but it might be temporary.');
    return $return;
  }
  elseif ($mail == 'fail@example.com') {
    $debug_log[] = "Fail test address $mail";
    $return['confidence'] = EMAIL_VALIDATOR_UNDELIVERABLE;
    $debug_log[] = "Undeliverable test address $mail";
    $return['message'] = t('Undeliverable');
    return $return;
  }

  // Check MX records.
  $host = drupal_substr(strchr($mail, '@'), 1);

  if ($use_cache) {
    // first check if we've looked this up recently.
    $result = db_query('SELECT result FROM {email_validator_cache} e '
              .'WHERE e.email = :email AND e.{when} > :when',
           array(
              ':email' => $mail,
              ':when' => time() - 60*60*24, // last day
           ))->fetchField();
    if ($result !== false) {
      $debug_log[] = "Returning from cache: result $result";
      $debug_log[] = $return['message'] = email_validator_code_translate($result, $mail, $host);
      $return['confidence'] = $confidence_map[$result];
      return $return;
    }
    $debug_log[] = "Not in cache";
  }
  else {
    $debug_log[] = "Cache not consulted";
  }

  // Flood check.
  if (email_validator_flood($mail)) {
    $debug_log[] = $return['message'] = t('Sorry, there have been too many invalid email addresses tried from your IP address.');
    $return['confidence'] = EMAIL_VALIDATOR_UNDELIVERABLE;
    return $return;
  }

  // Let's see if we can find anything about this host in the DNS.
  if (!checkdnsrr($host, 'ANY')) {
    $debug_log[] = check_plain("checkdnsrr ANY failed for host '$host'");
    $debug_log[] = $return['message'] = email_validator_result($mail,$host, 2);
    $return['confidence'] = EMAIL_VALIDATOR_UNDELIVERABLE;
    return $return;
  }
  $debug_log[] = "checkdnsrr ANY success";

  if ($level == EMAIL_VALIDATOR_DNS) {
    // Reached configured level.
    $debug_log[] = "&#x2714; SUCCESS (syntax, DNS).";
    $return['message'] = email_validator_result($mail, $host, 0);
    return $return;
  }
  foreach ($skip_patterns as $pattern) {
    $pattern = trim($pattern); 
    if (!$pattern) {
      continue;
    }
    if (fnmatch($pattern, $host)) {
      $debug_log[] = "Skipping SMTP checks because domain matched '$pattern'";

      // Everything is OK, so record success.
      $debug_log[] = "&#x2714; SUCCESS (syntax, DNS, skipped SMTP check).";
      $return['message'] = email_validator_result($mail, $host, 0);
      return $return;
    }
  }

  // What SMTP servers should we contact?
  $mx_hosts = array();
  if (!getmxrr($host, $mx_hosts)) {
    $debug_log[] = check_plain("getmxrr failed for '$host' - will use '$host'");
    // When there is no MX record, the host itself should be used.
    $mx_hosts[] = $host;
  }
  $debug_log[] = check_plain("MX hosts found: " . implode(", ", $mx_hosts));

  // Some of these may be multiple IPs - we'd need to test them all. Make a unique list.
  $mx_ips = array();
  foreach ($mx_hosts as $hostname) {
    foreach (gethostbynamel($hostname) as $ip) {
      $mx_ips[$ip] = $hostname;
  } }


  // SMTP responses may be multiple lines.
  // We have to read until we get a line like
  // "NNN ", ie. a response code followed by a space.
  $get_smtp_response = function($connect) use (&$debug_log) {
    $rcv ='';
    do {
      $_ = trim(fgets($connect, 1024));
      $rcv .= "$_\n"; // normalise line endings.
      $debug_log[] = "«" . check_plain($_);
    } while (isset($_[3]) && $_[3] != ' ');
    return $rcv;
  };

  // Just a wrapper to also write to the debug log.
  $send_smtp = function($connect, $_) use (&$debug_log) {
    $debug_log[] = check_plain("»$_");
    fputs($connect, "$_\r\n");
  };

  // Try to connect to one SMTP server.
  foreach ($mx_ips as $smtp=>$hostname) {
    $debug_log[] = check_plain("Trying MX $smtp for $hostname");

    $connect = @fsockopen($smtp, 25, $errno, $errstr, 15);

    if (!$connect) {
      $debug_log[] = check_plain("...failed to connect to $smtp<-$hostname<-$host  (error: $errno: $errstr)");
      continue;
    }

    // Connected, read all the info the servers sends.
    // The end to this happens when a space is on the 4th character!
    $rcv = $get_smtp_response($connect);
    if (preg_match("/^220 /m", $rcv)) {
      $debug_log[] = "...successful connection, will continue with this MX";
      // OK, we have a SMTP connection.
      break;
    }
    else {
      $debug_log[] = "...connection was not allowed: $rcv";
      // The SMTP server probably does not like us
      // (dynamic/residential IP for aol.com for instance)
      $connect = FALSE;
    }
  }

  if (!$connect) {
    $debug_log[] = check_plain("Failed to connect to any MX for $mail");
    $debug_log[] = $return['message'] = email_validator_result($mail,$host, 3);
    $return['confidence'] = EMAIL_VALIDATOR_UNSURE;
    return $return;
  }

  $from = variable_get('email_validator_returnpath',
                variable_get('site_mail', ini_get('sendmail_from')));
  // Extract the <...> part, if there is one.
  if (preg_match('/\<(.*)\>/', $from, $match) > 0) {
    $from = $match[1];
  }

  // Should be good enough for RFC compliant SMTP servers.
  $localhost = $_SERVER["HTTP_HOST"];
  if (!$localhost) {
    $localhost = 'localhost';
  }

  // Have the chat...
  $send_smtp($connect,"EHLO $localhost");
  $out = $get_smtp_response($connect);

  $send_smtp($connect, "MAIL FROM: <$from>");
  $from = $get_smtp_response($connect);

  $send_smtp($connect, "RCPT TO: <{$mail}>");
  $to = $get_smtp_response($connect);

  $send_smtp($connect, "QUIT");
  fclose($connect);

  if (!preg_match('/^250 /m', $from))  {
    // Again, something went wrong before we could really test the address.
    // Be on the safe side and accept it.
    $from = str_replace("\n", "<br/>\n", check_plain(implode("\n",$from)));
    watchdog('email_validator', "Could not verify email address at host $host: $from (but accepted from user's POV)");
    $debug_log[] = "MAIL FROM did not give success (250) code. (we still allow this) Instead got<pre>$from</pre>";
    $debug_log[] = $return['message'] = email_validator_result($mail,$host, 5);
    $return['confidence'] = EMAIL_VALIDATOR_UNSURE;
    return $return;
  }

  if (preg_match("/^4[\d][\d] /m", $to)
      || preg_match("/(Client host|Helo command) rejected/", $to)) {
      // Any 4xx error also means we couldn't really check, a mail *might* get through
      // (e.g. greylist, or mailbox full at mo).
      // This server does not like us (noos.fr behaves like this for instance).

    // look out for greylisting
    if (preg_match('/gr[ea]y ?list/i', $to)) {
      $to = str_replace("\n", "<br/>\n", check_plain(implode("\n",$to)));
      $debug_log[] = "Greylisted, should be fine. Got: $to";
      watchdog('email_validator', "Greylisting in operation at $host: $to accepted by validator.");
      $debug_log[] = $return['message'] = email_validator_result($mail,$host, 6);
      $return['confidence'] = EMAIL_VALIDATOR_UNSURE;
      return $return;
    }

    // In those cases, accept the email, but log a warning.
    $debug_log[] = "&#x2714; MAIL TO failed. (still accept).";
    watchdog('email_validator', "Could not verify email address at host $host: $to (but accepted from user's POV)");
    $debug_log[] = $msg = $return['message']($mail,$host, 6);
    $return['confidence'] = EMAIL_VALIDATOR_UNSURE;
    return $return;
  }

  if (!preg_match("/^250 /m", $to)) {
    $to = str_replace("\n", "<br/>\n", check_plain(implode("\n",$to)));
    watchdog('email_validator', "Rejected email address: $mail. Reason: $to");
    $debug_log[] = "MAIL TO did not give success (250) code. Instead got $to";
    $debug_log[] = $return['message'] = email_validator_result($mail,$host, 4);
    $return['confidence'] = EMAIL_VALIDATOR_UNSURE;
    return $return;
  }

  // Everything is OK, so record success.
  $debug_log[] = "&#x2714; SUCCESS.";
  $return['message'] = email_validator_result($mail,$host, 0);
  return $return;
}


/**
 * Debug form
 */
function email_validator_debug_form() {
  drupal_set_title("Email Validator Test email address");
  $form = array(
    'test_email' => array(
      '#type' => 'textfield',
      '#title' => t('Enter email address to test. No mail will actually be sent. You can also enter a like match e.g. %@foo.com if you want to just do an IP lookup'),
      '#default_value' => '',
    ),
    'cache' => array(
      '#type' => 'checkbox',
      '#title' => 'Do not use cache',
      '#default_value' => 1,
    ),
    'cache_clear' => array(
      '#type' => 'textfield',
      '#title' => 'Clear cache for emails with this substring. Use * for full cache clear(!)',
      '#default_value' => '',
    ),
    'test_ip' => array(
      '#type' => 'textfield',
      '#description' => "Nb. your IP address is $_SERVER[REMOTE_ADDR]",
      '#title' => 'Check a certain IP address',
      '#default_value' => '',
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => 'Test',
    ),
  );
  return $form;
}
/**
 * Check the given email
 */
function email_validator_debug_form_validate($form, &$form_state) {

}
/**
 * Check the given email
 */
function email_validator_debug_form_submit($form, &$form_state) {
  $form_state['redirect'] = false;

  $match = trim($form_state['values']['cache_clear']);
  if ($match) {
    // we need to clear the cache.
    $del = db_delete('email_validator_cache');

    if ($match != '*') {
      $del->condition('email', "%$match%", "LIKE");
    }
    $del->execute();
    drupal_set_message("Cleared cache for all emails matching " . htmlspecialchars($match));
  }

  $ips = [];
  if ($form_state['values']['test_email']) {
    // We have an email
    $mail = $form_state['values']['test_email'];
    $host = drupal_substr(strchr($mail, '@'), 1);

    // First, run the tests.
    if (strpos($form_state['values']['test_email'], '%')===FALSE) {
      $result = email_validator_check($form_state['values']['test_email'], $log, ! (bool) $form_state['values']['cache']);
      $log = implode("<br/>", $log);
      if ($result) {
        form_set_error("test_email", $log);
      }
      else {
        drupal_set_message("Accepted.<br />$log");
      }
    }

    // perform ip analysis.
    // Look up ip(s) matching the given address, then add a report for each IP.
    $result = db_query('SELECT * FROM {email_validator_cache} e WHERE e.email LIKE(:email)',
      [ ':email' => $form_state['values']['test_email'] ]);

    $table = ['header' => ['Date', 'IP', 'Email', 'Result'], 'rows' => []];
    while ($row = $result->fetchAssoc()) {
      $ips[$row['ip']] = 1;
      $line = email_validator_code_translate($row['result'], $mail, $host);
      if ($line === null) {
        $line = "OK (code $row[result])";
      }
      $table['rows'][] = [ date('j M Y H:i:s', $row['when']), $row['ip'], $row['email'], $line ];
    }
    $ips = array_keys($ips);
    $table=theme('table', $table);
    drupal_set_message("Cache table for " . $form_state['values']['test_email'] . ":\n" . $table);
  }

  if (!empty($form_state['values']['test_ip'])) {
    $ips [] = $form_state['values']['test_ip'];
  }

  if ($ips) {
    $too_many_today = (int) variable_get('email_validator_flood_today',3);
    $too_many_this_month = (int) variable_get('email_validator_flood_month',10);
    $table = ['header' => ['IP address', "Failures today (allowed $too_many_today)", "Failures last month (allowed $too_many_this_month)", 'Lookups last month'], 'rows'=> []];
    $failed_attempts = 'e.result IN (1,2,3,4)';
    foreach ($ips as $ip) {

      $flood = db_query(
        "SELECT SUM(e.when > :in_last_day AND $failed_attempts ) AS failures_today,
        SUM($failed_attempts) AS failures_last_month,
        COUNT(ip) AS lookups_last_month
        FROM email_validator_cache e
        WHERE ip = :ip AND e.when > :in_last_month",
        array(
          ':ip' => $ip,
          ':in_last_day' => time() - 60*60*24, // 1 day
          ':in_last_month' => time() - 60*60*24*30, // 1 month(ish)
        ))->fetchAssoc();

      $table['rows'][] = [$ip, (int)$flood['failures_today'], (int)$flood['failures_last_month'], (int)$flood['lookups_last_month'] ];
    }
    $table = "<h3>IP flood report</h3>" . theme('table', $table);
    drupal_set_message($table);

  }
}


/**
 * Demo form
 */
function email_validator_demo_form() {
  $form = array(
    'fs' => [
      '#tree' => TRUE, // for testing.
      '#type' => 'fieldset',
      '#title' => 'Demo fieldset',
      'test_email' => array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#default_value' => '',
        '#pre_render' => ['email_validator_pre_render'],
        '#form_id' => __FUNCTION__,
        '#element_validate' => ['email_validator_element_validate'],
      ),
    ],
    'name' => [
      '#type' => 'textfield',
      '#title' => 'Some other required field',
      '#required' => TRUE,
      '#description' => t('You can ignore this.'),
    ],
    'submit' => array(
      '#type' => 'submit',
      '#value' => 'Submit',
    ),
  );
  return $form;
}
/**
 * Check the given email
 */
function email_validator_demo_form_validate($form, &$form_state) {
$x=1;
}
/**
 * Check the given email
 */
function email_validator_demo_form_submit($form, &$form_state) {
  drupal_set_message("Email accepted; form submitted.");
}


// Utility functions

function email_validator_pre_render($element) {
  return EmailValidator::preRender($element);
}
function email_validator_element_validate($element, &$form_state, $form) {
  // I think I need to check for #required?
  if (empty($element['#value'])) {
    if (empty($element['#required'])) {
      // Field is optional.
      return;
    }
    // Required but not provided.
    form_error($element, t('This field is required.'));
    return;
  }

  if (isset($form_state['input']['email_validator_confirm'])) {
    // Confirm field is sent.
    // User has provided a 2nd email.
    if ($form_state['input']['email_validator_confirm'] != $element['#value']) {
      // The user-entered 2nd version didn't match.
      // Don't do any further checking now.
      form_error($element, t("Emails did not match"));
      EmailValidator::setFormRequiresConfirm($form, $element,
        "The emails did not match. Please re-check.");
      return;
    }
  }
  if (isset($form_state['input']['email_validator_confirmed'])
    && $form_state['input']['email_validator_confirmed'] == $element['#value']) {
      // User has previously confirmed this value. All good.
      EmailValidator::previouslyConfirmed($form, $element);
      return;
  }

  // Run the actual check.
  $result = email_validator_run_check($element['#value']);

  if ($result['confidence'] == EMAIL_VALIDATOR_OK) {
    // All fine.
    return;
  }
  if ($result['confidence'] == EMAIL_VALIDATOR_UNDELIVERABLE) {
    // Cannot proceed.
    form_error($element, $result['message']);
    return;
  }

  // Left with the unsure case.
  if (isset($form_state['input']['email_validator_confirm'])) {
    // Test was unsure but user has provided a 2nd email and we know it matches
    // (tested above). Let's accept it.
    EmailValidator::previouslyConfirmed($form, $element);
    return;
  }

  // Test was unsure and provided email has not yet been confirmed by user,
  // mark it as invalid, requiring confirmation field.
  EmailValidator::setFormRequiresConfirm($form, $element,
    "Please double-check and re-enter your email address as we may have detected a problem.");

}
/**
 * @return error string, or null (no error)
 */
function email_validator_code_translate($code, $mail, $host) {

  switch ($code) {
    case 0: // perfecto
    case 5: // Something went wrong in initial SMTP chat. Allow it.
    case 6: // We were unable to obtain a definite YES, or NO. Allow it.
        return null;
    case 1:
        return t('The email provider %host is not allowing this website to send it email.', array('%host'=>$host));
    case 2:
        return t('Email host %host invalid, please correct.', array('%host' => "$host"));
    case 3:
        return t('Email host %host is not accepting email.', array('%host' => "$host"));
    case 4:
        return t('The email server for %mail is not accepting our email. Could be wrong email, full inbox, or a blocking policy - could be a temporary problem.', array('%mail' => "$mail"));
    default:
        return;
  }
}

/**
 * Store result
 */
function email_validator_result($mail, $host, $code) {

  db_insert('email_validator_cache')
    ->fields( array(
        'ip' => $_SERVER['REMOTE_ADDR'],
        'email' => $mail,
        '{email_validator_cache}.when' => time(),
        'result' => $code,
        ))
    ->execute();

    return email_validator_code_translate($code, $mail, $host);

}

/**
 * Detects flood, currently configged at 3/day max.
 *
 * Behaviours to catch
 *
 * 1. fast-paced abuse, lots of tests quickly
 * 2. timed abuse, e.g. 4/day at regular intervals
 * 3. history of abuse in last month.
 *
 * (1, 2) are dealt with together: allowed 3 failed attempts in one day
 * (3) is done as over 10 failed attempts in the last month.
 *
 * @return bool true for flood detected
 */
function email_validator_flood($mail) {

  $failed_attempts = 'e.result IN (1,2,3,4)';
  $ok_attempts = 'e.result IN (0,5,6)';
  $too_many_today = (int) variable_get('email_validator_flood_today',3);
  $too_many_this_month = (int) variable_get('email_validator_flood_month',10);
  $flood = db_query(
        "SELECT SUM(e.when > :in_last_day AND $failed_attempts )>$too_many_today OR
                SUM($failed_attempts) > $too_many_this_month
                AS deny
        FROM email_validator_cache e
        WHERE ip = :ip AND e.when > :in_last_month",
    array(
        ':ip' => $_SERVER['REMOTE_ADDR'],
        ':in_last_day' => time() - 60*60*24, // 1 day
        ':in_last_month' => time() - 60*60*24*30, // 1 month(ish)
    ))
    ->fetchField();
  if ($flood=="1") {
     // flood detected
     watchdog('email_validator', "IP @ip exceeded flood limit. @mail denied.",
        array('@ip'=>$_SERVER['REMOTE_ADDR'],
              '@mail' => $mail ));
     return true;
  }
 return false;
}
